190207 prot_domain_segmentor.
Raphael R. Eguchi

A CNN for performing semantic segmantation of multi-domain protein structures.
Written in Python. Main requirements are Biopython, Pytorch, Numpy, Scipy. (I use Conda since Pytorch recommends using it.)

A tutorial for beginners can be found at: http://www.proteindesign.org/segmentor-tutorial.html


Example Usage as a Class:
    (Class definition in classes/DomainSegmentor.py)
    
    import sys
    sys.path.insert(0, '/path/to/classes/DomainSegmentor.py') # add to import path to run anywhere.
    from DomainSegmentor import *

    segmentor = DomainSegmentor() # Initialize model.
    classes, res_nums = segmentor.predictClass('/path/to/pdb')  # Get Class Predictions.
    probs, res_nums = segmentor.predict('/path/to/pdb')  # Get Probability Matrix.

    print("Residue Numbers: ")
    print(res_nums)
    print("Class Predictions: ")
    print(classes)
    print("Probability Matrix: ")
    print(probs)

    # The predict function returns a matrix of probabilities and a vector of residue numbers indicating the residue number of each column.
    # The predictClass function returns a list class predictions and corresponding vector of residue numbers. See DomainSegmentor.py for more details.
    

Example Usage as a Pymol/Python Script:
    pymol run_segmentor.py /path/to/pdb  # Should color the structure nicely in pymol.
    python run_segmentor.py /path/to/pdb  # Outputs a list of class predictions and corresponding residue numbers.


------ 190207 Update ------
Added the domain parsing variant of the model. This can be run using the DomainParser class or using the run_parser.py script using the same commands described above. For the DomainParser class, the predict() and predictClass() functions return domain probabilities and domain assignments respectively.
For example: 
    import sys
    sys.path.insert(0, '/path/to/classes/DomainParser.py') # add to import path to run anywhere.
    from DomainParser import *

    parser = DomainParser() # Initialize model.
    classes, res_nums = parser.predictClass('/path/to/pdb')  # Get Parser Predictions.
    probs, res_nums = parser.predict('/path/to/pdb')  # Get Probability Matrix.


Added the GDT predictor trained on submissions to the free modelling categories for CASP 10~12. See https://www.biorxiv.org/content/10.1101/474627v3 for more details. 
